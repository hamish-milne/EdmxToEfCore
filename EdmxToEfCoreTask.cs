namespace EdmxToEfCore
{
	using Microsoft.Build.Framework;
	using Microsoft.Build.Utilities;
	using System;
	using System.IO;
	using System.Linq;
	using System.Collections.Generic;
	using System.Xml.Serialization;
	using Configuration = ModelToCode.Configuration;

	public class EdmxToEfCoreTask : Task
	{
		public ITaskItem[] ModelInputs { get; set; }

		private static T GetEnum<T>(ITaskItem item, string name)
		{
			var str = item.GetMetadata(name);
			if (string.IsNullOrEmpty(str)) { return default(T); }
			return (T)Enum.Parse(typeof(T), str, true);
		}

		public void ExecuteInstance(ITaskItem item)
		{
			var InputFile = item.GetMetadata("FullPath");
			var OutputPathPattern = item.GetMetadata("OutputPathPattern") ?? "{0}.autogenerated.cs";
			var configuration = new Configuration();
			configuration.CollectionType = GetEnum<ModelToCode.CollectionType>(item, nameof(Configuration.CollectionType));
			configuration.ComplexMetaType = GetEnum<MetaType>(item, nameof(Configuration.ComplexMetaType));
			configuration.FileMode = GetEnum<ModelToCode.FileMode>(item, nameof(Configuration.FileMode));
			var boolStr = item.GetMetadata(nameof(Configuration.LazyLoading));
			configuration.LazyLoading = string.IsNullOrEmpty(boolStr) ? default(bool?) : bool.Parse(boolStr);

			ModelToCode.ProcessFile(configuration, InputFile, OutputPathPattern, m => Log.LogMessage(m));
		}

		public override bool Execute()
		{
			foreach (var item in ModelInputs.OrEmpty())
			{
				ExecuteInstance(item);
			}
			return true;
		}
	}
}